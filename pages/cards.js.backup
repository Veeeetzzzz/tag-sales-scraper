import React, { useState, useEffect } from "react";

export default function Cards() {
  const [cards, setCards] = useState([]);
  const [setInfo, setSetInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSet, setSelectedSet] = useState('all');
  const [includeSales, setIncludeSales] = useState(false);
  const [salesMatched, setSalesMatched] = useState(false);

  const fetchCards = async (withSales = false) => {
    setLoading(true);
    try {
      const response = await fetch(`/api/cards?includeSales=${withSales}`);
      const data = await response.json();
      
      if (response.ok) {
        setCards(data.cards);
        setSetInfo(data.setInfo);
        setSalesMatched(data.salesMatched);
      } else {
        console.error('Error fetching cards:', data.error);
      }
    } catch (error) {
      console.error('Error fetching cards:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCards(includeSales);
  }, [includeSales]);

  const filteredCards = cards.filter(card => {
    const matchesSearch = card.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (setInfo && setInfo.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
                         card.type?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         card.subtype?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSet = selectedSet === 'all' || (setInfo && setInfo.name === selectedSet);
    return matchesSearch && matchesSet;
  });

  const sets = setInfo ? [setInfo.name] : [];

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Navigation Bar */}
      <nav className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo/Brand */}
            <div className="flex items-center">
              <h1 className="text-xl font-bold text-gray-900">TAG Price Tracker</h1>
            </div>
            
            {/* Navigation Links */}
            <div className="flex space-x-8">
              <a 
                href="/" 
                className="text-gray-500 hover:text-gray-700 px-1 pb-4 pt-5 text-sm font-medium"
              >
                All TAG Sales
              </a>
              <span 
                className="text-blue-600 border-b-2 border-blue-600 px-1 pb-4 pt-5 text-sm font-medium"
              >
                Card List
              </span>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="p-6">
        <div className="mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-3xl font-bold text-center flex-1">
              {setInfo ? setInfo.name : 'TAG Pokemon Card Database'}
            </h2>
            <div className="flex items-center gap-4">
              <button
                onClick={() => setIncludeSales(!includeSales)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  includeSales 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                {includeSales ? 'Hide Sales Data' : 'Match Sales Data'}
              </button>
              <div className="text-sm text-gray-500">
                {filteredCards.length} cards
                {salesMatched && <span className="ml-2 text-green-600">â€¢ Sales Matched</span>}
              </div>
            </div>
          </div>
          
          {/* Set Information */}
          {setInfo && (
            <div className="max-w-4xl mx-auto mb-4 p-4 bg-blue-50 rounded-lg">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-semibold text-blue-900">{setInfo.name}</h3>
                  <p className="text-sm text-blue-700">
                    {setInfo.code} â€¢ Released: {new Date(setInfo.releaseDate).toLocaleDateString()} â€¢ {setInfo.totalCards} total cards
                  </p>
                  <p className="text-sm text-blue-600">{setInfo.description}</p>
                </div>
              </div>
            </div>
          )}

          {/* Search and Filter Controls */}
          <div className="max-w-4xl mx-auto">
            <div className="flex flex-col md:flex-row gap-4 items-center">
              {/* Search Bar */}
              <div className="flex-1 max-w-md">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Search cards by name or set..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                </div>
              </div>

              {/* Set Filter */}
              <div className="flex items-center gap-2">
                <label htmlFor="set-select" className="text-sm font-medium text-gray-700 whitespace-nowrap">
                  Set:
                </label>
                <select
                  id="set-select"
                  value={selectedSet}
                  onChange={(e) => setSelectedSet(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                >
                  <option value="all">All Sets</option>
                  {sets.map(set => (
                    <option key={set} value={set}>{set}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        </div>

        {loading ? (
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p className="mt-2">Loading card database...</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
            {filteredCards.map((card) => (
              <div key={card.id} className="bg-white p-4 rounded-xl shadow hover:shadow-lg transition-shadow cursor-pointer">
                {/* Card Image Placeholder */}
                <div className="w-full h-48 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg mb-4 flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-2xl mb-2">ðŸŽ´</div>
                    <div className="text-xs text-gray-600">{card.type}</div>
                    {card.subtype && (
                      <div className="text-xs text-purple-600 font-medium">{card.subtype}</div>
                    )}
                  </div>
                </div>
                
                <h3 className="text-lg font-semibold mb-2 line-clamp-2">{card.name}</h3>
                
                <div className="text-sm text-gray-600 mb-2">
                  <p>{setInfo?.name || 'Unknown Set'}</p>
                  <p>#{card.cardNumber} â€¢ {card.rarity}</p>
                  {card.hp && <p>HP: {card.hp}</p>}
                </div>
                
                <div className="border-t pt-3">
                  {salesMatched && card.priceStats.count > 0 ? (
                    <>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm text-gray-500">Avg Price:</span>
                        <span className="text-lg font-bold text-green-600">
                          Â£{card.priceStats.average.toFixed(2)}
                        </span>
                      </div>
                      
                      <div className="text-xs text-gray-500 mb-2">
                        Range: Â£{card.priceStats.min.toFixed(2)} - Â£{card.priceStats.max.toFixed(2)}
                      </div>
                      
                      <div className="flex justify-between items-center text-xs">
                        <span className="text-gray-500">{card.priceStats.count} recent sales</span>
                        <span className="text-gray-500">
                          {card.lastSold ? `Last: ${card.lastSold}` : 'No recent sales'}
                        </span>
                      </div>
                      
                      {card.recentSales.length > 0 && (
                        <div className="mt-2 pt-2 border-t">
                          <div className="text-xs text-gray-500 mb-1">Recent Sales:</div>
                          {card.recentSales.slice(0, 3).map((sale, idx) => (
                            <div key={idx} className="text-xs text-gray-600 mb-1">
                              Â£{sale.price.toFixed(2)} â€¢ {sale.soldDate}
                            </div>
                          ))}
                        </div>
                      )}
                    </>
                  ) : (
                    <div className="text-center text-gray-500 text-sm">
                      {salesMatched ? 'No matching sales found' : 'Enable sales matching to see prices'}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        {!loading && filteredCards.length === 0 && (
          <div className="text-center py-12">
            <p className="text-gray-500">No cards found matching your search criteria.</p>
          </div>
        )}
      </div>
    </div>
  );
} 